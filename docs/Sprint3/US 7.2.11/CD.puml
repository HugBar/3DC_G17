@startuml Create Specialization Class Diagram

' Frontend Components
class CreateSpecialization {
  -specializationData: {name: string, description: string}
  -successMessage: string
  -errorMessage: string
  +handleChange(e: Event): void
  +handleSubmit(e: Event): void
  +render(): JSX.Element
}

class SpecializationService {
  -API_URL: string
  +addSpecialization(data: SpecializationData): Promise<Response>
}

' Backend Components
class SpecializationController {
  +addSpecialization(req: Request, res: Response): Promise<void>
}

class SpecializationService {
  +{static} addSpecialization(specializationDto: SpecializationDto): Promise<Specialization>
}

class SpecializationRepository {
  +findByName(name: string): Promise<Specialization>
  +create(specialization: SpecializationData): Promise<Specialization>
}

class SpecializationDto {
  +name: string
  +description: string
  +constructor(name: string, description: string)
}

class Specialization {
  +id: string
  +name: string
  +description: string
  +createdAt: Date
  +updatedAt: Date
}

' Relationships
CreateSpecialization --> SpecializationService: uses
SpecializationController --> SpecializationService: uses
SpecializationService --> SpecializationRepository: uses
SpecializationService --> SpecializationDto: uses
SpecializationController ..> SpecializationDto: creates
SpecializationRepository --> Specialization: manages

@enduml