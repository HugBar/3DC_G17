@startuml Update Specialization Class Diagram

skinparam classAttributeIconSize 0

package "Frontend" {
    class UpdateSpecialization {
        - specializationData: Object
        - successMessage: string
        - errorMessage: string
        + handleChange(event): void
        + handleSubmit(event): void
        + render(): JSX
    }

    class SpecializationService {
        + searchSpecializations(searchParams): Promise
        + updateSpecialization(id, data): Promise
    }
}

package "Backend" {
    class SpecializationController {
        + updateSpecialization(req, res): Promise
    }

    class SpecializationService {
        + {static} updateSpecialization(id, specializationDto): Promise
    }

    class SpecializationRepository {
        - instance: SpecializationRepository
        + findById(id): Promise
        + findByName(name): Promise
        + update(id, updateData): Promise
    }

    class SpecializationDto {
        + name: string
        + description: string
        + constructor(name, description)
    }

    class Specialization {
        + id: string
        + name: string
        + description: string
        + createdAt: Date
        + updatedAt: Date
    }
}

' Relationships
UpdateSpecialization --> SpecializationService: uses
SpecializationService --> "HTTP" : uses
SpecializationController --> SpecializationService: uses
SpecializationService --> SpecializationRepository: uses
SpecializationService --> SpecializationDto: uses
SpecializationController ..> SpecializationDto: creates
SpecializationRepository --> Specialization: manages

@enduml