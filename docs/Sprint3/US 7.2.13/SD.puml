@startuml Update Specialization Sequence Diagram

actor Admin
participant Frontend as "UpdateSpecialization Component"
participant FrontendService as "SpecializationService (Frontend)"
participant Controller as "SpecializationController"
participant Service as "SpecializationService (Backend)"
participant Repository as "SpecializationRepository"
participant Database as "MongoDB"

Admin -> Frontend: Access Update Specialization Page
activate Frontend

Frontend -> FrontendService: searchSpecializations(name)
activate FrontendService

FrontendService -> Controller: GET /specializations/search
activate Controller

Controller -> Service: searchSpecializations(searchDto)
activate Service

Service -> Repository: searchSpecialization(filters)
activate Repository
Repository -> Database: Query
Database --> Repository: Result
Repository --> Service: Return result
deactivate Repository

Service --> Controller: Return specializations
Controller --> FrontendService: 200 OK with specializations
FrontendService --> Frontend: Return specialization data

Frontend -> Frontend: Display form with current data

Admin -> Frontend: Modify specialization details
Admin -> Frontend: Submit form
Frontend -> Frontend: handleSubmit()

Frontend -> FrontendService: updateSpecialization(id, specializationData)
FrontendService -> Controller: PUT /specializations/{id}
activate Controller

Controller -> Service: updateSpecialization(id, specializationDto)
activate Service

Service -> Repository: findById(id)
activate Repository
Repository -> Database: Query
Database --> Repository: Result
Repository --> Service: Return result
deactivate Repository

alt Specialization Not Found
    Service --> Controller: throw Error('Specialization not found')
    Controller --> FrontendService: 404 Not Found
    FrontendService --> Frontend: Error Message
    Frontend --> Admin: Display "Not Found" message
else Specialization Found
    Service -> Repository: findByName(name)
    activate Repository
    Repository -> Database: Query
    Database --> Repository: Result
    Repository --> Service: Return result
    deactivate Repository

    alt Name Already Exists
        Service --> Controller: throw Error('Name already exists')
        Controller --> FrontendService: 409 Conflict
        FrontendService --> Frontend: Error Message
        Frontend --> Admin: Display error message
    else Name Available
        Service -> Repository: update(id, updateData)
        activate Repository
        Repository -> Database: Update
        Database --> Repository: Updated Record
        Repository --> Service: Return result
        deactivate Repository
        
        Service --> Controller: Return updated specialization
        Controller --> FrontendService: 200 OK with updated data
        FrontendService --> Frontend: Success Response
        Frontend --> Admin: Show success message
    end
end

deactivate Service
deactivate Controller
deactivate FrontendService
deactivate Frontend

@enduml