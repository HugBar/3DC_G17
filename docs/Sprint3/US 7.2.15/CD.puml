@startuml Delete Specialization Class Diagram

' Frontend Components
class DeleteSpecialization {
  - specializationId: string
  - successMessage: string
  - errorMessage: string
  + handleDelete(): void
  + render(): JSX.Element
}

class SpecializationService {
  - API_URL: string
  + getAllSpecializations(): Promise<Specialization[]>
  + deleteSpecialization(id: string): Promise<Response>
}

' Backend Components
class SpecializationController {
  + deleteSpecialization(req: Request, res: Response): Promise<void>
  + getAllSpecializations(req: Request, res: Response): Promise<void>
  + getSpecializationById(req: Request, res: Response): Promise<void>
}

class SpecializationService {
  + {static} deleteSpecialization(id: string): Promise<Specialization>
  + {static} getAllSpecializations(): Promise<Specialization[]>
  + {static} getSpecializationById(id: string): Promise<Specialization>
}

class SpecializationRepository {
  + findById(id: string): Promise<Specialization>
  + delete(id: string): Promise<Specialization>
  + findAll(): Promise<Specialization[]>
}

class DeleteSpecializationDto {
  + id: string
  + constructor(id: string)
}

class Specialization {
  + id: string
  + name: string
  + description: string
  + createdAt: Date
  + updatedAt: Date
}

' Relationships
DeleteSpecialization --> SpecializationService: uses
SpecializationController --> SpecializationService: uses
SpecializationService --> SpecializationRepository: uses
SpecializationService --> DeleteSpecializationDto: uses
SpecializationController ..> DeleteSpecializationDto: creates
SpecializationRepository --> Specialization: manages

@enduml