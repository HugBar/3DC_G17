@startuml Update Medical Record Class Diagram

' Frontend Components
class UpdateMedicalRecord {
  -patientId: string
  -record: MedicalRecord
  -selectedConditions: Array<Condition>
  -selectedAllergies: Array<Allergy>
  -availableConditions: Array<Condition>
  -availableAllergies: Array<Allergy>
  +handleSearch(): void
  +handleUpdate(): void
  +handleRemoveCondition(name: string): void
  +handleRemoveAllergy(name: string): void
  +render(): JSX.Element
}

class MedicalRecordService {
  +getMedicalRecord(patientId: string): Promise<MedicalRecord>
  +getAllMedicalConditions(): Promise<Array<Condition>>
  +getAllAllergies(): Promise<Array<Allergy>>
  +updateMedicalRecord(patientId: string, data: UpdateData): Promise<Response>
}

' Backend Components
class MedicalRecordController {
  +updatePatientConditionsAndAllergies(req: Request, res: Response): Promise<void>
  +getMedicalRecordByPatientId(req: Request, res: Response): Promise<void>
}

class MedicalRecordService {
  +updatePatientConditionsAndAllergies(patientId: string, updateDto: UpdateMedicalRecordDto): Promise<MedicalRecord>
}

class MedicalRecordRepository {
  +findByPatientId(patientId: string): Promise<MedicalRecord>
  +update(patientId: string, updateData: any): Promise<MedicalRecord>
  +create(medicalRecordData: any): Promise<MedicalRecord>
}

class UpdateMedicalRecordDto {
  +conditions: Array<Condition>
  +allergies: Array<Allergy>
  +constructor(conditions: Array<Condition>, allergies: Array<Allergy>)
}

class MedicalRecord {
  +patientId: string
  +conditions: Array<Condition>
  +allergies: Array<Allergy>
  +lastUpdated: Date
}

' Relationships
UpdateMedicalRecord --> MedicalRecordService: uses
MedicalRecordController --> MedicalRecordService: uses
MedicalRecordService --> MedicalRecordRepository: uses
MedicalRecordController ..> UpdateMedicalRecordDto: creates
MedicalRecordRepository --> MedicalRecord: manages

@enduml